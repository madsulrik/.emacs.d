* Configuration: !start
This config has taken inspiration from the following config files.
- [[https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d][Aaron biebers emacs config]]
- [[https://github.com/patrickt/emacs/blob/master/readme.org][Patrick Thomson's emacs config]]
- [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]]

** Preliminaries

I'll say it: modern Emacs Lisp is unfairly maligned. However, it was pretty fairly maligned before Emacs 24, which introduced
lexical scoping. For reasons of compatibility, it's not on by default, and the documentation states that "unlike other file-local
variables, this must be set in the first line of a file."

#+begin_src emacs-lisp
     (setq lexical-binding t)
#+end_src

Many of Emacs's defaults are ill-suited for my purposes, but the first one that needs fixing is the shockingly low
garbage-collection threshold, which defaults to a paltry *:8kb*. Setting it to *:100mb* seems to strike a nice balance between GC
pauses and performance. I also like to turn on the messages associated therewith, since thrashing GC is a good indicator of runaway
processes or similar weirdness.

#+begin_src emacs-lisp
     (setq gc-cons-threshold 100000000)
#+end_src

We use ~use-package~ everywhere (it is loaded in the [[https://github.com/patrickt/emacs/blob/master/init.el][~init.el~]] that bootstraps this whole enterprise), and by default we want it to
install all mentioned packages. There are some bugs associated with this approach, I am told, but it tends to work for me, and if I
get a message about a missing package I just call ~package-install~.

#+begin_src emacs-lisp
     (setq use-package-always-ensure t)
#+end_src

default font sizes

#+begin_src emacs-lisp
     ;; You will most likely need to adjust this font size for your system!
     (defvar mus/default-font-size 110)
     (defvar mus/default-variable-font-size 160)

     ;; Make frame transparency overridable
     (defvar mus/frame-transparency '(90 . 90))
#+end_src

*** keeping folders clean
We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean! It knows about a wide
variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and
setting these variables yourself.

#+begin_src emacs-lisp
      (use-package no-littering)

      ;; no-littering doesn't set this by default so we must place
      ;; auto save files in the same path as it uses for sessions
      (setq auto-save-file-name-transforms
            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Fixing the defaults

I dont like scrolling with the mouse and the arrow keys

#+begin_src emacs-lisp
  (global-unset-key (kbd "<left>"))
  (global-unset-key (kbd "<right>"))
  (global-unset-key (kbd "<up>"))
  (global-unset-key (kbd "<down>"))
#+end_src

Fixing Emacs's defaults is a nontrivial problem. We'll start with UI concerns.

#+begin_src emacs-lisp
  (setq
   ;; No need to see GNU agitprop.
   inhibit-startup-screen t
   ;; No need to remind me what a scratch buffer is.
   initial-scratch-message nil
   ;; Double-spaces after periods is morally wrong.
   sentence-end-double-space nil
   ;; Never ding at me, ever.
   ring-bell-function 'ignore
   ;; Prompts should go in the minibuffer, not in a GUI.
   use-dialog-box nil
   ;; Fix undo in commands affecting the mark.
   mark-even-if-inactive nil
   ;; Let C-k delete the whole line.
   kill-whole-line t
   ;; search should be case-sensitive by default
   case-fold-search nil
   ;; no need to prompt for the read command _every_ time
   compilation-read-command nil
   ;; always scroll
   compilation-scroll-output t)

       ;; Never mix tabs and spaces. Never use tabs, period.
       ;; We need the setq-default here because this becomes
       ;; a buffer-local variable when set.
       (setq-default indent-tabs-mode nil)

       (defalias 'yes-or-no-p 'y-or-n-p)       ; Accept 'y' in lieu of 'yes'.
#+end_src

It's good that Emacs supports the wide variety of file encodings it does, but UTF-8 should always, /always/ be the default.

#+begin_src emacs-lisp
     (set-charset-priority 'unicode)
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

We also need to turn on a few modes to have behavior that's even remotely modern.

#+begin_src emacs-lisp
     (delete-selection-mode t)
     (global-display-line-numbers-mode t)
     (column-number-mode)
#+end_src

Emacs 27 comes with fast current-line highlight functionality, but it can produce some visual feedback in ~vterm~ or ~ivy~ buffers,
so we only activate it in programming or text modes.

#+begin_src emacs-lisp
     (require 'hl-line)
     (add-hook 'prog-mode-hook #'hl-line-mode)
     (add-hook 'text-mode-hook #'hl-line-mode)
     ;(set-face-attribute 'hl-line nil :background "gray21")
#+end_src

Emacs is super fond of littering filesystems with backups and autosaves, since it was built with the assumption that multiple users could be using the same Emacs instance on the same filesystem. This was valid in 1980. It is no longer the case.

#+begin_src emacs-lisp
     (setq
      make-backup-files nil
      auto-save-default nil
      create-lockfiles nil)
#+end_src

By default, Emacs stores any configuration you make through its UI by writing ~custom-set-variables~ invocations to your init file, or to the file specified by ~custom-file~. Though this is convenient, it's also an excellent way to cause aggravation when the variable you keep trying to modify is being set in some ~custom-set-variables~ invocation. We can disable this by mapping it to the null device.

#+begin_src emacs-lisp
     (setq custom-file null-device)
#+end_src

However, because Emacs stores theme-safety information in that file, we have to disable the warnings entirely. This is not
particularly secure, but if someone has uploaded malicious code to MELPA inside a theme, I have bigger problems. (Besides, Emacs is
not a secure system, and I see no need to try overmuch to make it one.)

#+begin_src emacs-lisp
     (setq custom-safe-themes t)
#+end_src

By default, the list of recent files gets cluttered up with the contents of downloaded packages. It comes with Emacs, so there's no ~use-package~ call required.

#+begin_src emacs-lisp
     (require 'recentf)
     (add-to-list 'recentf-exclude "\\elpa")
#+end_src

Emoji don't work on Emacs versions < 27 (aside from the Mitsuharu Yamamoto emacs-mac port), and for those greater than 27 we seem to
need this. A fun fact about this: that commented parenthesis is to work around an inscrutable parsing bug associated with the ~<~ in
~version<~ that breaks the elisp indentation mode. Emacs!

#+begin_src emacs-lisp
     (if ( version< "27.0" emacs-version ) ; )
         (set-fontset-font "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
       (warn "This Emacs version is too old to properly support emoji."))
#+end_src

There are a great many keybindings that are actively hostile, in that they are bound to useless or obsolete functions that are
really easy to trigger accidentally.

#+begin_src emacs-lisp
     (unbind-key "C-x C-f") ;; find-file-read-only
     (unbind-key "C-x C-d") ;; list-directory
     (unbind-key "C-z") ;; suspend-frame
     (unbind-key "M-o") ;; facemenu-mode
     (unbind-key "<mouse-2>") ;; pasting with mouse-wheel click
     (unbind-key "<C-wheel-down>") ;; text scale adjust
     (unbind-key "<C-wheel-up>") ;; ditto
     (unbind-key "s-n") ;; make-frame
#+end_src

The out-of-the-box treatment of whitespace is unfortunate, but fixable.

#+begin_src emacs-lisp
     (add-hook 'before-save-hook #'delete-trailing-whitespace)
     (setq require-final-newline t)
#+end_src


Emacs is also in love with showing you its NEWS file; it's bound to like four different keybindings. Overriding the function makes
it a no-op. You might say… no news is good news. For that matter, we can elide more GNU agitprop.

#+begin_src emacs-lisp
     (defalias 'view-emacs-news 'ignore)
     (defalias 'describe-gnu-project 'ignore)
#+end_src

Undo has always been problematic for me in Emacs. The beauty of undo-tree is that it means that, once you've typed something into a
buffer, you'll always be able to get it back. At least in theory. undo-tree has long-standing data loss bugs that are unlikely to be
fixed. But no other package provodes a comparable experience.

#+begin_src emacs-lisp
     (use-package undo-tree
       :diminish
       :bind (("C-c _" . undo-tree-visualize))
       :config
       (global-undo-tree-mode +1)
       (unbind-key "M-_" undo-tree-map))
#+end_src

It's 2020, we don't paste with mouse-wheel-click anymore.

I define a couple of my own configuration variables with ~defvar~, and no matter how many times I mark the variable as safe, it warns me every time I set it in the ~.dir-locals~ file. Disabling these warnings is probably (?) the right thing to do.

#+begin_src emacs-lisp
     (setq enable-local-variables :all)
#+end_src

Disable line numbers for some modes
#+begin_src emacs-lisp
     ;; Disable line numbers for some modes
     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     treemacs-mode-hook
                     eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Evil
This configuration uses evil-mode for a Vi-like modal editing experience. general.el is used for easy keybinding configuration that
integrates well with which-key. evil-collection is used to automatically configure various Emacs modes with Vi-like keybindings for
evil-mode.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer mus/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix ","
      :global-prefix "C-,")

    (mus/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ecf" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config/general.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))

#+end_src

** OSX fix
There is some path issues when using Mac OSX. The following fixes the issues

#+begin_src emacs-lisp

  (use-package exec-path-from-shell)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

  (setq mac-option-modifier nil)
  (setq mac-command-modifier 'meta)

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/opt/homebrew/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))
  ;; (when (equal system-type 'darwin)
  ;;  (setq insert-directory-program "/opt/homebrew/bin/gls"))


#+end_src

** Visual
I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

     (set-face-attribute 'default nil :font "Fira Code" :height mus/default-font-size)

     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height mus/default-font-size)

     ;; Set the variable pitch face
     ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height mus/default-variable-font-size :weight 'regular)
     (set-face-attribute 'variable-pitch nil :font "ETBembo" :height mus/default-variable-font-size :weight 'thin)


     (use-package all-the-icons)

     (use-package all-the-icons-dired
       :after all-the-icons
       :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

Every Emacs window should, by default occupy all the screen space it can.

#+begin_src emacs-lisp

     (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

Set a better title bar for osx

#+begin_src emacs-lisp

     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))
     (setq frame-title-format nil)
     (setq ns-use-proxy-icon nil)

#+end_src

Window chrome both wastes space and looks unappealing.

#+begin_src emacs-lisp
     (when (window-system)
       (menu-bar-mode -1)
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
       (tooltip-mode -1))
#+end_src

I use the [[https://github.com/hlissner/emacs-doom-themes][Doom Emacs themes]], which are gorgeous.

#+begin_src emacs-lisp
     (use-package doom-themes
       :config
       (let ((chosen-theme 'doom-dracula))
         (doom-themes-visual-bell-config)
         (doom-themes-org-config)
         (setq doom-challenger-deep-brighter-comments t
               doom-challenger-deep-brighter-modeline t
               doom-dark+-blue-modeline nil)
         (load-theme chosen-theme)))
#+end_src

Most major modes pollute the modeline, so we pull in diminish.el to quiesce them.

#+begin_src emacs-lisp
     (use-package diminish
       :config (diminish 'eldoc-mode))
#+end_src

The default modeline is pretty uninspiring, and doom-modeline doesn't appear to be particularly slow.

#+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init
       :config
       (doom-modeline-mode 1)
       (setq doom-modeline-modal-icon t)
       (setq doom-modeline-lsp t))
#+end_src

I find it useful to have a slightly more apparent indicator of which buffer is active at the moment.

#+begin_src emacs-lisp
     (use-package dimmer
       :custom (dimmer-fraction 0.1)
       :config (dimmer-mode))
#+end_src

Highlighting the closing/opening pair associated with a given parenthesis is essential. Furthermore, parentheses should be delimited
by color. I may be colorblind, but it's good enough, usually.

#+begin_src emacs-lisp
     (show-paren-mode)

     (use-package rainbow-delimiters
       :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

It's nice to have the option to center a window, given the considerable size of my screen.

#+begin_src emacs-lisp
     (use-package centered-window
       :ensure t
       :custom
       (cwm-centered-window-width 180))
#+end_src

Having indentation highlights can help with Haskell and YAML and other languages where indentation is crucial and sometimes difficult to follow in long lines.

#+begin_src emacs-lisp
     (use-package highlight-indent-guides)
#+end_src


[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for
the prefix. For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame
displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings
in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src


*** Tree-sitter

As part of my day job, I hack on the [[https://tree-sitter.github.io][~tree-sitter~]] parsing
toolkit. Pleasingly enough, the parsers generated by ~tree-sitter~
can be used to spruce up syntax highlighting within Emacs: for
example, highlighting Python with ~emacs-tree-sitter~ will
correctly highlight code inside format strings, which is really
quite useful.

#+begin_src emacs-lisp
      ;; (use-package tree-sitter
      ;;   :hook ((ruby-mode . tree-sitter-hl-mode)
      ;;          (js-mode . tree-sitter-hl-mode)
      ;;          (typescript-mode . tree-sitter-hl-mode)
      ;;          (go-mode . tree-sitter-hl-mode)))
      ;; (use-package tree-sitter-langs)
#+end_src

** Text manipulation
The ~fill-paragraph~ (~M-q~) command can be useful for formatting long text lines in a pleasing matter. I don't do it in every
document, but when I do, I want more columns than the default *:70*.

#+begin_src emacs-lisp
     (setq-default fill-column 135)
#+end_src

Parenthesis matching is one of the flaws in my Emacs setup as of this writing. I know that there are a lot of options out
there---~paredit~, ~smartparens~, etc.---but I haven't sat down and really capital-L Learned a better solution than the
TextMate-style bracket completion (which Emacs calls, somewhat fancifully, 'electric').

#+begin_src emacs-lisp
     (electric-pair-mode)
     (add-function :before-until electric-pair-inhibit-predicate (lambda (c) (eq c ?<)))
#+end_src

Some rando string and list manipulation libraries: [[https://github.com/magnars/s.el][s.el]] [[https://github.com/magnars/dash.el][dash.el]]

#+begin_src emacs-lisp
     (use-package s)
     (use-package dash)
#+end_src

** Org mode
is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and
literate coding utility all wrapped up in one package.
*** Better Font Faces
The =mus/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most
cases so that it looks more like we're editing a document in =org-mode=. We switch back to fixed width (monospace) fonts for code
blocks and tables so that they display correctly.

#+begin_src emacs-lisp
  (defun mus/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "ETBembo" :weight 'bold :height (cdr face)))


    (require 'org-indent)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way

    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil   :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
#+end_src

*** basic configuration
This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates. There's a
lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp
  (defun mus/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :hook (org-mode . mus/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-src-tab-acts-natively nil)
    (mus/org-font-setup))
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control. Another option for
this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp
      (use-package org-bullets
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Center Org Buffers
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the
buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove
the block below if you don't like the behavior.

#+begin_src emacs-lisp
      (defun mus/org-mode-visual-fill ()
        (setq visual-fill-column-width 135
              visual-fill-column-center-text t)
        (visual-fill-column-mode 1))

      (use-package visual-fill-column
        :hook (org-mode . mus/org-mode-visual-fill))
#+end_src

*** Configure Babel Languages
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like
to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
      (with-eval-after-load 'org
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (python . t)))

        (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

*** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with
=org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=. For example, to insert an empty
=emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be
the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
      (with-eval-after-load 'org
        ;; This is needed as of Org 9.2
        (require 'org-tempo)

        (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
        (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
        (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

*** Evil bindings

quickfix for a =evil-redirect-digit-argument= error. See [[https://github.com/Somelauw/evil-org-mode/issues/93#issuecomment-950306532][github issue]].

#+begin_src emacs-lisp
      ;; (fset 'evil-redirect-digit-argument 'ignore)

      ;; (add-to-list 'evil-digit-bound-motions 'evil-org-beginning-of-line)
      ;; (evil-define-key 'motion 'evil-org-mode
      ;;   (kbd "0") 'evil-org-beginning-of-line)
#+end_src


#+begin_src emacs-lisp
    (use-package evil-org
      :after org
      :hook ((org-mode . evil-org-mode)
             (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional))))))

    (mus/leader-keys
     "o"   '(:ignore t :which-key "org mode")
     "oi"  '(:ignore t :which-key "insert")
     "oil" '(org-insert-link :which-key "insert link")
     "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow"))
#+end_src

** File Management
*** Dired
Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:
**** Key Bindings
***** Navigation
*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

***** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

***** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

***** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

***** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

***** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

**** Configuration

#+begin_src emacs-lisp

    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom (
               (if (eq system-type 'darwin)
                   (insert-directory-program "gls" dired-use-ls-dired t))
                 ;; (dired-listing-switches "-al --group-directories-first")
                 (dired-listing-switches "-agho --group-directories-first"))
               :config
               (evil-collection-define-key 'normal 'dired-mode-map
                 "h" 'dired-single-up-directory
                 "l" 'dired-single-buffer))

    (use-package dired-single
      :commands (dired dired-jump))

    ;; (use-package all-the-icons-dired
    ;;   :hook (dired-mode . all-the-icons-dired-mode))

    ;; (use-package dired-open
    ;;   :commands (dired dired-jump)
    ;;   :config
    ;;   ;; Doesn't work as expected!
    ;;   ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;;   (setq dired-open-extensions '(("png" . "feh")
    ;;                                 ("mkv" . "mpv"))))

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" 'dired-hide-dotfiles-mode))

#+end_src

** IDE features
*** Git

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package magit-todos
    :defer t)
#+end_src

*** Workspaces

#+begin_src emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src

*** Terminal
**** Vterm
is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal
applications. This enables it to be much faster than term-mode and to also provide a more complete terminal emulation experience.

Make sure that you have the necessary dependencies installed before trying to use vterm because there is a module that will need to be
compiled before you can use it successfully.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    ;;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src

*** Projectile
Most every nontrivial package provides projectile integration in some form or fashion.

#+begin_src emacs-lisp
      (defun mus/switch-project-action ()
        "Switch to a workspace with the project name."
        (persp-switch (projectile-project-name))
        ;; (projectile-dired)
        ;; (magit-status)
        )
        (use-package projectile
          :diminish
          ;; :bind (("C-c k" . #'projectile-kill-buffers)
          ;;       ("C-c M" . #'projectile-compile-project))
          :custom
          (projectile-completion-system 'ivy)
          (projectile-enable-caching t)
          :config (projectile-mode)
          :init
          (setq projectile-switch-project-action #'mus/switch-project-action)
          ;; (setq counsel-projectile-switch-project-action #'mus/switch-project-action)
          )
#+end_src

*** Ivy, counsel, and swiper
Now that Helm And with ivy-rich, things even look nice. counsel provides nice UI chrome for built-in commands, counsel-projectile
provides project integration, and amx provides most-recently-used information and keeps track of which commands I use and which I
don’t.

#+begin_src emacs-lisp
      (use-package ivy
        :diminish
        :custom
        (ivy-height 30)
        (ivy-use-virtual-buffers nil)
        (ivy-use-selectable-prompt t)
        :config
        (ivy-mode 1)
        :bind (("C-c C-r" . #'ivy-resume)
               ("C-c s"   . #'swiper-thing-at-point)
               ("C-s"     . #'swiper)))

      (use-package ivy-rich
        :custom
        (ivy-virtual-abbreviate 'full)
        (ivy-rich-switch-buffer-align-virtual-buffer nil)
        (ivy-rich-path-style 'full)
        :config
        (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
        (ivy-rich-mode))

      (use-package counsel
        :init
        (counsel-mode 1)
        :diminish
        :config
        (mus/leader-keys
          "i" 'counsel-imenu
          "f" 'counsel-find-file
          "s" 'counsel-projectile-rg
          "x" 'counsel-M-x
          "b" 'persp-counsel-switch-buffer))

      (use-package counsel-projectile
        :config
        (evil-define-key 'normal global-map (kbd "C-p")     'counsel-projectile)
        ;; (evil-define-key 'normal global-map (kbd "C-S-p")   'counsel-projectile-switch-project)
        (evil-define-key 'normal global-map (kbd "C-S-p")   'projectile-switch-project))

      (use-package smex)
#+end_src

*** Flycheck
Flycheck performs in-buffer highlighting of errors and warnings, and is superior on many axes to the builtin flymake mode. The only
configuration it needs is to add [[https://github.com/amperser/proselint][~proselint~]] support and to disable the documentation checking in org-src buffers.

#+begin_src emacs-lisp
      (use-package flycheck
        :after org
        :hook
        (org-src-mode . disable-flycheck-for-elisp)
        :custom
        (flycheck-emacs-lisp-initialize-packages t)
        (flycheck-display-errors-delay 0.1)
        :config
        (global-flycheck-mode)
        (flycheck-set-indication-mode 'left-margin)

        (defun disable-flycheck-for-elisp ()
          (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

        (add-to-list 'flycheck-checkers 'proselint)
        (setq-default flycheck-disabled-checkers '(haskell-stack-ghc)))

      (use-package flycheck-inline
        :disabled
        :config (global-flycheck-inline-mode))
#+end_src

***  Flyspell

#+begin_src emacs-lisp
    (use-package flyspell
      :ensure t
      :defer t
      :hook ((org-mode . flyspell-mode)
             (markdown-mode . flyspell-mode))
      :init
      :config

      (use-package flyspell-correct
        :after flyspell
        :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

      (use-package flyspell-correct-ivy
        :after flyspell-correct)


      (use-package flyspell-lazy
        :after flyspell
        :config
        (setq flyspell-lazy-idle-seconds 1
              flyspell-lazy-window-idle-seconds 3)
        (flyspell-lazy-mode 1)))
#+end_src

*** Searching
deadgrep is the bee’s knees for project-wide search, as it uses ripgrep.
#+begin_src emacs-lisp
      (use-package deadgrep
        :ensure t)
#+end_src

*** Autocomplete
Completion in Emacs is sort of a fraught enterprise, given the existence of pcomplete, hippie-expand, and complete.el. company is
the least problematic and most modern of these alternatives, though it’s kind of a bear to configure. Its interface is not so nice
by default but all the frontends flicker terribly if you’re typing quickly, which is just spectacularly distracting.

#+begin_src emacs-lisp
      (use-package company
        :diminish
        :bind (("C-." . #'company-capf))
        :bind (:map company-active-map
               ("C-n" . #'company-select-next)
               ("C-p" . #'company-select-previous))
        :hook (prog-mode . company-mode)
        :custom
        (company-dabbrev-downcase nil "Don't downcase returned candidates.")
        (company-show-numbers t "Numbers are helpful.")
        (company-tooltip-limit 20 "The more the merrier.")
        (company-tooltip-idle-delay 0.4 "Faster!")
        (company-async-timeout 20 "Some requests can take a long time. That's fine.")
        (company-idle-delay 1.5 "Default is way too low.")
        :config)
#+end_src

*** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that
speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your
language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added. I *highly
recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l=
in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp
  (defun mus/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred lsp-execute-code-action)
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . lsp-diagnostics-modeline-mode))
    :bind(("C-c C-c" . #'lsp-execute-code-action)
          ("C-c i" . #'lsp-format-buffer))
    :init
    (setq lsp-keymap-prefix "C-c l")
    :custom
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-eldoc-enable-hover nil)
    (lsp-diagnostics-modeline-scope :project)
    (lsp-file-watch-threshold 5000)
    (lsp-response-timeout 2)
    (lsp-ui-doc-mode nil)
    (lsp-enable-file-watchers nil)
    (lsp-auto-guess-root t)
     (lsp-eldoc-enable-hover t)
    :config
    (define-key evil-motion-state-map (kbd "K") 'lsp-describe-thing-at-point))
#+end_src


[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-sideline-enable t)
      (lsp-ui-sideline-show-hover nil)
      (lsp-ui-sideline-show-code-actions nil)
      (lsp-ui-doc-mode nil)
      (lsp-ui-doc-enable nil)
      ;; (lsp-ui-doc-position 'bottom)
      :after lsp-mode)

#+end_src


[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic
messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left
side of your screen in your editor.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp-mode)
#+end_src


[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code. When you run these commands, a prompt
will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the
minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after ivy lsp-mode)


     (use-package company-lsp
      :disabled
      :custom (company-lsp-enable-snippet t)
      :after (company lsp-mode))

#+end_src

*** Snippets
#+begin_src emacs-lisp
      (use-package yasnippet
        :defer 3 ;; takes a while to load, so do it async
        :diminish yas-minor-mode
        :config
        (yas-global-mode)
        (define-key yas-minor-mode-map (kbd "<escape>") 'yas-exit-snippet)
        :custom (yas-prompt-functions '(yas-completing-prompt)))

        (use-package yasnippet-snippets
  :ensure t)
#+end_src

** Language support
*** Ruby + rails

#+begin_src emacs-lisp
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-project-root-files "Gemfile"))

  (use-package ruby-mode
    :after lsp-mode
    :hook (ruby-mode . lsp-deferred)
    :config
    (setq ruby-insert-encoding-magic-comment nil)
    (use-package inf-ruby
      :hook
      (ruby-mode . inf-ruby-minor-mode)
      :init
      (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)))

  (use-package rvm
    :diminish
    :config
    (rvm-use-default))

  (use-package web-mode
    :mode (".html?$" ".erb$")
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  (use-package projectile-rails
    ;; :ensure t
    :commands (projectile-rails-on)
    ;; :after projectile
    :hook ((ruby-mode inf-ruby-mode projectile-rails-server-mode) . projectile-rails-mode)
    :hook ((projectile-mode) . projectile-rails-on)
    :config
    (define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map))
#+end_src

*** Meta lisp
Here are packages that are useful across different Lisp and Scheme implementations:

#+begin_src emacs-lisp
  (use-package lispy
    :hook ((emacs-lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)))

  (use-package lispyville
    :hook ((lispy-mode . lispyville-mode))
    :config
    (lispyville-set-key-theme '(operators c-w additional
                                          additional-movement slurp/barf-cp
                                          prettify)))
#+end_src

*** Dart + flutter
#+begin_src emacs-lisp

  (with-eval-after-load "projectile"
    (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
    (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))

    (use-package lsp-dart
  :ensure t
  :hook (dart-mode . lsp))

  (use-package dart-mode
    :after lsp-mode
    :hook (dart-mode . lsp-deferred))

  (use-package flutter
    :after dart-mode
    :bind (:map dart-mode-map
                ("C-M-x" . #'flutter-run-or-hot-reload))
    :custom
    (flutter-sdk-path "/home/mads/development/flutter"))

#+end_src

*** Typescript
This is a basic configuration for the TypeScript language so that .ts files activate typescript-mode when opened. We’re also adding a
hook to typescript-mode-hook to call lsp-deferred so that we activate lsp-mode to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

(defun mus/set-js-indentation ()
  (setq-default js-indent-level 2)
  (setq-default evil-shift-width js-indent-level)
  (setq-default tab-width 2))

(use-package js2-mode
  :mode "\\.jsx?\\'"
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'mus/set-js-indentation)
  (add-hook 'json-mode-hook #'mus/set-js-indentation))


#+end_src


* Adios
Au revoir.

#+begin_src emacs-lisp
    (provide 'init)
#+end_src
